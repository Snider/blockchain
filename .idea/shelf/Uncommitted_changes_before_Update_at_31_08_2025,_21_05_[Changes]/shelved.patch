Index: .idea/blockchain.iml
===================================================================
diff --git a/.idea/blockchain.iml b/.idea/blockchain.iml
deleted file mode 100644
--- a/.idea/blockchain.iml	(revision 0cda9070cbfd6580d9984ce392674690fd5e0750)
+++ /dev/null	(revision 0cda9070cbfd6580d9984ce392674690fd5e0750)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="WEB_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
-      <excludeFolder url="file://$MODULE_DIR$/temp" />
-      <excludeFolder url="file://$MODULE_DIR$/tmp" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"BackendCodeEditorMiscSettings\">\n    <option name=\"/Default/Environment/Hierarchy/GeneratedFilesCacheKey/Timestamp/@EntryValue\" value=\"142\" type=\"long\" />\n    <option name=\"/Default/Housekeeping/FeatureSuggestion/FeatureSuggestionManager/DisabledSuggesters/=SwitchToGoToActionSuggester/@EntryIndexedValue\" value=\"true\" type=\"bool\" />\n    <option name=\"/Default/Housekeeping/GlobalSettingsUpgraded/IsUpgraded/@EntryValue\" value=\"true\" type=\"bool\" />\n    <option name=\"/Default/Housekeeping/OptionsDialog/SelectedPageId/@EntryValue\" value=\"CppIncludesOrderOptions\" type=\"string\" />\n  </component>\n  <component name=\"CMakePresetLoader\">{\n  &quot;useNewFormat&quot;: true\n}</component>\n  <component name=\"CMakeProjectFlavorService\">\n    <option name=\"flavorId\" value=\"CMakePlainProjectFlavor\" />\n  </component>\n  <component name=\"CMakeReloadState\">\n    <option name=\"reloaded\" value=\"true\" />\n  </component>\n  <component name=\"CMakeRunConfigurationManager\">\n    <generated>\n      <config projectName=\"Zano\" targetName=\"mdbx_load\" />\n      <config projectName=\"Zano\" targetName=\"stratum\" />\n      <config projectName=\"Zano\" targetName=\"common\" />\n      <config projectName=\"Zano\" targetName=\"lmdb\" />\n      <config projectName=\"Zano\" targetName=\"simplewallet\" />\n      <config projectName=\"Zano\" targetName=\"version\" />\n      <config projectName=\"Zano\" targetName=\"connectivity_tool\" />\n      <config projectName=\"Zano\" targetName=\"crypto\" />\n      <config projectName=\"Zano\" targetName=\"mdbx_stat\" />\n      <config projectName=\"Zano\" targetName=\"wallet\" />\n      <config projectName=\"Zano\" targetName=\"mdbx\" />\n      <config projectName=\"Zano\" targetName=\"daemon\" />\n      <config projectName=\"Zano\" targetName=\"mdbx_dump\" />\n      <config projectName=\"Zano\" targetName=\"currency_core\" />\n      <config projectName=\"Zano\" targetName=\"mdbx_copy\" />\n      <config projectName=\"Zano\" targetName=\"libminiupnpc-static\" />\n      <config projectName=\"Zano\" targetName=\"upnpc-static\" />\n      <config projectName=\"Zano\" targetName=\"zlib\" />\n      <config projectName=\"Zano\" targetName=\"ethash\" />\n      <config projectName=\"Zano\" targetName=\"zlibstatic\" />\n      <config projectName=\"Zano\" targetName=\"boost_external\" />\n      <config projectName=\"Zano\" targetName=\"rpc\" />\n      <config projectName=\"Zano\" targetName=\"mdbx_chk\" />\n    </generated>\n  </component>\n  <component name=\"CMakeSettings\">\n    <configurations />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"98928ae7-17a0-4cf3-a624-d115607a891b\" name=\"Changes\" comment=\"git ignore\">\n      <change afterPath=\"$PROJECT_DIR$/cmake/Boost.cmake\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/cmake/BoostB2.cmake\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/cmake/BoostCmake.cmake\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/cmake/Policy.cmake\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.github/actions/sign-and-upload-release/action.yml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.github/actions/sign-and-upload-release/action.yml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.gitignore\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gitignore\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/QtSettings.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/cmake.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/cmake.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/editor.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/editor.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/CMakeLists.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/CMakeLists.txt\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/LICENSE\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/LICENSE\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/CMakeLists.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/CMakeLists.txt\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"CMakeBuildProfile:Debug-WSL\" />\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"dev\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/src/daemon/daemon.cpp\" root0=\"FORCE_HIGHLIGHTING\" />\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"ProjectErrors\" />\n  </component>\n  <component name=\"ProjectApplicationVersion\">\n    <option name=\"ide\" value=\"CLion\" />\n    <option name=\"majorVersion\" value=\"2025\" />\n    <option name=\"minorVersion\" value=\"2\" />\n    <option name=\"productBranch\" value=\"Classic\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"31k37hfJUxYRhgpZTRmKjdmU25P\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"CMake Application.daemon.executor\": \"Run\",\n    \"Makefile Target.default_target.executor\": \"Run\",\n    \"RunOnceActivity.RadMigrateCodeStyle\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252\": \"true\",\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\n    \"RunOnceActivity.readMode.enableVisualFormatting\": \"true\",\n    \"RunOnceActivity.west.config.association.type.startup.service\": \"true\",\n    \"cf.advertisement.text.overridden\": \"true\",\n    \"cf.first.check.clang-format\": \"false\",\n    \"cidr.known.project.marker\": \"true\",\n    \"com.jfrog.conanplugin.addconansupport\": \"true\",\n    \"com.jfrog.conanplugin.automanage.cmake.advanced.settings\": \"true\",\n    \"com.jfrog.conanplugin.conanexecutable\": \"conan\",\n    \"com.jfrog.conanplugin.hasbeensetup\": \"true\",\n    \"git-widget-placeholder\": \"dev-build-polish\",\n    \"last_opened_file_path\": \"C:/Users/snide/CLionProjects/blockchain/.github/workflows\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\n    \"settings.editor.selected.configurable\": \"CMakeSettings\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\snide\\CLionProjects\\blockchain\\.github\\workflows\" />\n      <recent name=\"C:\\Users\\snide\\CLionProjects\\blockchain\\cmake-build-release-wsl\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\snide\\CLionProjects\\blockchain\\cmake-build-release-visual-studio\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"CMake Application.daemon\">\n    <configuration default=\"true\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"boost_external\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"boost_external\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"common\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"common\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"connectivity_tool\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"connectivity_tool\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"connectivity_tool\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"crypto\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"crypto\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"currency_core\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"currency_core\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"daemon\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"daemon\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"daemon\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ethash\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"ethash\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"libminiupnpc-static\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"libminiupnpc-static\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"lmdb\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"lmdb\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"mdbx\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"mdbx\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"mdbx_chk\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"mdbx_chk\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"mdbx_chk\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"mdbx_copy\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"mdbx_copy\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"mdbx_copy\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"mdbx_dump\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"mdbx_dump\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"mdbx_dump\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"mdbx_load\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"mdbx_load\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"mdbx_load\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"mdbx_stat\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"mdbx_stat\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"mdbx_stat\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"rpc\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"rpc\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"simplewallet\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"simplewallet\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"simplewallet\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"stratum\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"stratum\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"upnpc-static\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"upnpc-static\" CONFIG_NAME=\"Debug-WSL\" RUN_TARGET_PROJECT_NAME=\"Zano\" RUN_TARGET_NAME=\"upnpc-static\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"version\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"version\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"wallet\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"wallet\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"zlib\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"zlib\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"zlibstatic\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" EMULATE_TERMINAL=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"Zano\" TARGET_NAME=\"zlibstatic\" CONFIG_NAME=\"Debug-WSL\">\n      <method v=\"2\">\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"default_target\" type=\"MAKEFILE_TARGET_RUN_CONFIGURATION\" factoryName=\"Makefile\" temporary=\"true\">\n      <makefile filename=\"$PROJECT_DIR$/build/release/Makefile\" target=\"default_target\" workingDirectory=\"\" arguments=\"\">\n        <envs />\n      </makefile>\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"CMake Application.boost_external\" />\n      <item itemvalue=\"CMake Application.version\" />\n      <item itemvalue=\"CMake Application.lmdb\" />\n      <item itemvalue=\"CMake Application.mdbx\" />\n      <item itemvalue=\"CMake Application.mdbx_chk\" />\n      <item itemvalue=\"CMake Application.mdbx_copy\" />\n      <item itemvalue=\"CMake Application.mdbx_dump\" />\n      <item itemvalue=\"CMake Application.mdbx_load\" />\n      <item itemvalue=\"CMake Application.mdbx_stat\" />\n      <item itemvalue=\"CMake Application.ethash\" />\n      <item itemvalue=\"CMake Application.libminiupnpc-static\" />\n      <item itemvalue=\"CMake Application.upnpc-static\" />\n      <item itemvalue=\"CMake Application.zlib\" />\n      <item itemvalue=\"CMake Application.zlibstatic\" />\n      <item itemvalue=\"CMake Application.common\" />\n      <item itemvalue=\"CMake Application.connectivity_tool\" />\n      <item itemvalue=\"CMake Application.crypto\" />\n      <item itemvalue=\"CMake Application.currency_core\" />\n      <item itemvalue=\"CMake Application.daemon\" />\n      <item itemvalue=\"CMake Application.rpc\" />\n      <item itemvalue=\"CMake Application.simplewallet\" />\n      <item itemvalue=\"CMake Application.stratum\" />\n      <item itemvalue=\"CMake Application.wallet\" />\n      <item itemvalue=\"Makefile Target.default_target\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Makefile Target.default_target\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-e03c56caf84a-JavaScript-WS-252.23892.411\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"98928ae7-17a0-4cf3-a624-d115607a891b\" name=\"Changes\" comment=\"\" />\n      <created>1756054078839</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1756054078839</updated>\n      <workItem from=\"1756054081357\" duration=\"14000\" />\n      <workItem from=\"1756054120931\" duration=\"1442000\" />\n      <workItem from=\"1756056995964\" duration=\"346000\" />\n      <workItem from=\"1756057498890\" duration=\"18557000\" />\n      <workItem from=\"1756153285388\" duration=\"1915000\" />\n      <workItem from=\"1756214573342\" duration=\"178267000\" />\n      <workItem from=\"1756529483964\" duration=\"1441000\" />\n      <workItem from=\"1756533463611\" duration=\"26898000\" />\n      <workItem from=\"1756572998957\" duration=\"1927000\" />\n      <workItem from=\"1756574949309\" duration=\"2228000\" />\n      <workItem from=\"1756578478871\" duration=\"7456000\" />\n      <workItem from=\"1756586856576\" duration=\"9059000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Updates to QT6!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1756325309577</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1756325309577</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Windows QT build\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1756325439795</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1756325439795</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"remove qt5 install\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1756326369578</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1756326369578</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"git ignore\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1756577537088</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1756577537088</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnknownFeatures\">\n    <option featureType=\"dependencySupport\" implementationName=\"javascript:npm:prettier\" />\n    <option featureType=\"dependencySupport\" implementationName=\"executable:docker\" />\n    <option featureType=\"dependencySupport\" implementationName=\"javascript:npm:stylus\" />\n    <option featureType=\"dependencySupport\" implementationName=\"javascript:npm:@angular/core\" />\n    <option featureType=\"dependencySupport\" implementationName=\"executable:kubectl\" />\n    <option featureType=\"dependencySupport\" implementationName=\"javascript:npm:karma\" />\n  </component>\n  <component name=\"VCPKGProject\">\n    <isAutomaticCheckingOnLaunch value=\"false\" />\n    <isAutomaticFoundErrors value=\"true\" />\n    <isAutomaticReloadCMake value=\"true\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\n    <option name=\"CODE_SMELLS_PROFILE\" value=\"Project Default\" />\n    <MESSAGE value=\"Updates to QT6!\" />\n    <MESSAGE value=\"Windows QT build\" />\n    <MESSAGE value=\"remove qt5 install\" />\n    <MESSAGE value=\"git ignore\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"git ignore\" />\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0cda9070cbfd6580d9984ce392674690fd5e0750)
+++ b/.idea/workspace.xml	(date 1756670730374)
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="BackendCodeEditorMiscSettings">
-    <option name="/Default/Environment/Hierarchy/GeneratedFilesCacheKey/Timestamp/@EntryValue" value="142" type="long" />
+    <option name="/Default/Environment/Hierarchy/GeneratedFilesCacheKey/Timestamp/@EntryValue" value="137" type="long" />
     <option name="/Default/Housekeeping/FeatureSuggestion/FeatureSuggestionManager/DisabledSuggesters/=SwitchToGoToActionSuggester/@EntryIndexedValue" value="true" type="bool" />
     <option name="/Default/Housekeeping/GlobalSettingsUpgraded/IsUpgraded/@EntryValue" value="true" type="bool" />
     <option name="/Default/Housekeeping/OptionsDialog/SelectedPageId/@EntryValue" value="CppIncludesOrderOptions" type="string" />
@@ -46,30 +46,24 @@
     </generated>
   </component>
   <component name="CMakeSettings">
-    <configurations />
+    <configurations>
+      <configuration PROFILE_NAME="Release" ENABLED="true" GENERATION_DIR="build/mac/ninja" CONFIG_NAME="Release" GENERATION_OPTIONS="-G Ninja -DTESTNET=TRUE -DSTATIC=FALSE -DBUILD_GUI=FALSE -DDISABLE_TOR=TRUE" BUILD_OPTIONS="-j 10 --config Debug" />
+    </configurations>
   </component>
   <component name="ChangeListManager">
     <list default="true" id="98928ae7-17a0-4cf3-a624-d115607a891b" name="Changes" comment="git ignore">
-      <change afterPath="$PROJECT_DIR$/cmake/Boost.cmake" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/cmake/BoostB2.cmake" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/cmake/BoostCmake.cmake" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/cmake/Policy.cmake" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.github/actions/sign-and-upload-release/action.yml" beforeDir="false" afterPath="$PROJECT_DIR$/.github/actions/sign-and-upload-release/action.yml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/QtSettings.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/blockchain.iml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/cmake.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/cmake.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/editor.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/editor.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/CMakeLists.txt" beforeDir="false" afterPath="$PROJECT_DIR$/CMakeLists.txt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/LICENSE" beforeDir="false" afterPath="$PROJECT_DIR$/LICENSE" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/CMakeLists.txt" beforeDir="false" afterPath="$PROJECT_DIR$/src/CMakeLists.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake/BoostCmake.cmake" beforeDir="false" afterPath="$PROJECT_DIR$/cmake/BoostCmake.cmake" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ExecutionTargetManager" SELECTED_TARGET="CMakeBuildProfile:Debug-WSL" />
+  <component name="ExecutionTargetManager" SELECTED_TARGET="CMakeBuildProfile:Release" />
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
@@ -99,35 +93,35 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "CMake Application.daemon.executor": "Run",
-    "Makefile Target.default_target.executor": "Run",
-    "RunOnceActivity.RadMigrateCodeStyle": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252": "true",
-    "RunOnceActivity.cidr.known.project.marker": "true",
-    "RunOnceActivity.readMode.enableVisualFormatting": "true",
-    "RunOnceActivity.west.config.association.type.startup.service": "true",
-    "cf.advertisement.text.overridden": "true",
-    "cf.first.check.clang-format": "false",
-    "cidr.known.project.marker": "true",
-    "com.jfrog.conanplugin.addconansupport": "true",
-    "com.jfrog.conanplugin.automanage.cmake.advanced.settings": "true",
-    "com.jfrog.conanplugin.conanexecutable": "conan",
-    "com.jfrog.conanplugin.hasbeensetup": "true",
-    "git-widget-placeholder": "dev-build-polish",
-    "last_opened_file_path": "C:/Users/snide/CLionProjects/blockchain/.github/workflows",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "run.code.analysis.last.selected.profile": "pProject Default",
-    "settings.editor.selected.configurable": "CMakeSettings",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;CMake Application.daemon.executor&quot;: &quot;Run&quot;,
+    &quot;Makefile Target.default_target.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.RadMigrateCodeStyle&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.readMode.enableVisualFormatting&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.west.config.association.type.startup.service&quot;: &quot;true&quot;,
+    &quot;cf.advertisement.text.overridden&quot;: &quot;true&quot;,
+    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
+    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;com.jfrog.conanplugin.addconansupport&quot;: &quot;true&quot;,
+    &quot;com.jfrog.conanplugin.automanage.cmake.advanced.settings&quot;: &quot;true&quot;,
+    &quot;com.jfrog.conanplugin.conanexecutable&quot;: &quot;conan&quot;,
+    &quot;com.jfrog.conanplugin.hasbeensetup&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;dev-build-polish&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/snide/CLionProjects/blockchain/.github/workflows&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;CMakeSettings&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\snide\CLionProjects\blockchain\.github\workflows" />
@@ -138,122 +132,117 @@
     </key>
   </component>
   <component name="RunManager" selected="CMake Application.daemon">
-    <configuration default="true" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true">
+    <configuration name="boost_external" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="boost_external" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="boost_external" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="boost_external" CONFIG_NAME="Debug-WSL">
+    <configuration name="common" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="common" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="common" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="common" CONFIG_NAME="Debug-WSL">
+    <configuration name="connectivity_tool" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="connectivity_tool" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="connectivity_tool">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="connectivity_tool" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="connectivity_tool" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="connectivity_tool">
+    <configuration name="crypto" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="crypto" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="crypto" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="crypto" CONFIG_NAME="Debug-WSL">
+    <configuration name="currency_core" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="currency_core" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="currency_core" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="currency_core" CONFIG_NAME="Debug-WSL">
+    <configuration name="daemon" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="daemon" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="daemon">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="daemon" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="daemon" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="daemon">
+    <configuration name="ethash" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="ethash" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="ethash" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="ethash" CONFIG_NAME="Debug-WSL">
+    <configuration name="libminiupnpc-static" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="libminiupnpc-static" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="libminiupnpc-static" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="libminiupnpc-static" CONFIG_NAME="Debug-WSL">
+    <configuration name="lmdb" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="lmdb" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="lmdb" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="lmdb" CONFIG_NAME="Debug-WSL">
+    <configuration name="mdbx" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="mdbx" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx" CONFIG_NAME="Debug-WSL">
+    <configuration name="mdbx_chk" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_chk" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_chk">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="mdbx_chk" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_chk" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_chk">
+    <configuration name="mdbx_copy" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_copy" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_copy">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="mdbx_copy" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_copy" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_copy">
+    <configuration name="mdbx_dump" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_dump" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_dump">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="mdbx_dump" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_dump" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_dump">
+    <configuration name="mdbx_load" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_load" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_load">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="mdbx_load" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_load" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_load">
+    <configuration name="mdbx_stat" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_stat" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_stat">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="mdbx_stat" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="mdbx_stat" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="mdbx_stat">
+    <configuration name="rpc" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="rpc" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="rpc" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="rpc" CONFIG_NAME="Debug-WSL">
+    <configuration name="simplewallet" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="simplewallet" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="simplewallet">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="simplewallet" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="simplewallet" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="simplewallet">
+    <configuration name="stratum" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="stratum" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="stratum" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="stratum" CONFIG_NAME="Debug-WSL">
+    <configuration name="upnpc-static" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="upnpc-static" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="upnpc-static">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="upnpc-static" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="upnpc-static" CONFIG_NAME="Debug-WSL" RUN_TARGET_PROJECT_NAME="Zano" RUN_TARGET_NAME="upnpc-static">
+    <configuration name="version" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="version" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="version" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="version" CONFIG_NAME="Debug-WSL">
+    <configuration name="wallet" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="wallet" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="wallet" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="wallet" CONFIG_NAME="Debug-WSL">
+    <configuration name="zlib" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="zlib" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
     </configuration>
-    <configuration name="zlib" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="zlib" CONFIG_NAME="Debug-WSL">
-      <method v="2">
-        <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="zlibstatic" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="zlibstatic" CONFIG_NAME="Debug-WSL">
+    <configuration name="zlibstatic" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" EMULATE_TERMINAL="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Zano" TARGET_NAME="zlibstatic" CONFIG_NAME="Release">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
@@ -266,7 +255,13 @@
     </configuration>
     <list>
       <item itemvalue="CMake Application.boost_external" />
-      <item itemvalue="CMake Application.version" />
+      <item itemvalue="CMake Application.common" />
+      <item itemvalue="CMake Application.connectivity_tool" />
+      <item itemvalue="CMake Application.crypto" />
+      <item itemvalue="CMake Application.currency_core" />
+      <item itemvalue="CMake Application.daemon" />
+      <item itemvalue="CMake Application.ethash" />
+      <item itemvalue="CMake Application.libminiupnpc-static" />
       <item itemvalue="CMake Application.lmdb" />
       <item itemvalue="CMake Application.mdbx" />
       <item itemvalue="CMake Application.mdbx_chk" />
@@ -274,20 +269,14 @@
       <item itemvalue="CMake Application.mdbx_dump" />
       <item itemvalue="CMake Application.mdbx_load" />
       <item itemvalue="CMake Application.mdbx_stat" />
-      <item itemvalue="CMake Application.ethash" />
-      <item itemvalue="CMake Application.libminiupnpc-static" />
-      <item itemvalue="CMake Application.upnpc-static" />
-      <item itemvalue="CMake Application.zlib" />
-      <item itemvalue="CMake Application.zlibstatic" />
-      <item itemvalue="CMake Application.common" />
-      <item itemvalue="CMake Application.connectivity_tool" />
-      <item itemvalue="CMake Application.crypto" />
-      <item itemvalue="CMake Application.currency_core" />
-      <item itemvalue="CMake Application.daemon" />
       <item itemvalue="CMake Application.rpc" />
       <item itemvalue="CMake Application.simplewallet" />
       <item itemvalue="CMake Application.stratum" />
+      <item itemvalue="CMake Application.upnpc-static" />
+      <item itemvalue="CMake Application.version" />
       <item itemvalue="CMake Application.wallet" />
+      <item itemvalue="CMake Application.zlib" />
+      <item itemvalue="CMake Application.zlibstatic" />
       <item itemvalue="Makefile Target.default_target" />
     </list>
     <recent_temporary>
Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>cmake_minimum_required(VERSION 3.16)\n\nPROJECT(Zano)\nset(VERSION \"1.0\")\n\nmessage(\"OPENSSL_INCLUDE_DIR: ${OPENSSL_INCLUDE_DIR}\")    \nmessage(\"OPENSSL_CRYPTO_LIBRARY: ${OPENSSL_CRYPTO_LIBRARY}\")    \nmessage(\"OPENSSL_SSL_LIBRARY: ${OPENSSL_SSL_LIBRARY}\")    \n\nlist(INSERT CMAKE_MODULE_PATH 0\n        \"${CMAKE_SOURCE_DIR}/cmake\")\n\ninclude(Policy)\n\noption (USE_CCACHE \"Use ccache if a usable instance is found\" ON)\nif (USE_CCACHE)\n  include(FindCcache) # Has to be included after the project() macro, to be able to read the CXX variable.\nelse()\n  message(STATUS \"ccache deselected\")\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(ZANO_BOOST_MIN_VER 1.84)\n\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"iOS\" OR CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n  add_definitions(-DMOBILE_WALLET_BUILD)\n  if(CMAKE_SYSTEM_NAME STREQUAL \"iOS\" )   \n    add_definitions(-DIOS_BUILD)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fembed-bitcode -Wno-enum-constexpr-conversion\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fembed-bitcode -Wno-enum-constexpr-conversion\")\t\t\t\n  endif()\n  if(CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    add_definitions(-DANDROID_BUILD)\n    message(\"Android sdk prefix: ${CMAKE_CXX_ANDROID_TOOLCHAIN_PREFIX}\")    \n    message(\"Android CMAKE_CXX_COMPILER prefix: ${CMAKE_CXX_COMPILER}\")    \n    message(\"Android ANDROID_LD: ${ANDROID_LD}\")\n  endif()\nendif()\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# build types\nif (UNIX AND NOT APPLE)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Release;MinSizeRel;RelWithDebInfo\")\n  if (NOT CMAKE_BUILD_TYPE) # single configurations, defaults to Release\n    set(CMAKE_BUILD_TYPE \"Release\")\n  endif()\nendif()\nmessage(\"Generated with config types: ${CMAKE_CONFIGURATION_TYPES}, and built type: ${CMAKE_BUILD_TYPE}\")\n\nenable_testing()\n\nset(OPENSSL_USE_STATIC_LIBS TRUE) # link statically\nfind_package(OpenSSL REQUIRED)\n\n\nif(APPLE)\n  set(CMAKE_OSX_DEPLOYMENT_TARGET 12.0)\nendif()\n\nset(USE_PCH FALSE CACHE BOOL \"Use shared precompiled headers\")\nset(DISABLE_TOR FALSE CACHE BOOL \"Disable TOR library(and related tor-connect submodule)\")\nset(TESTNET FALSE CACHE BOOL \"Compile for testnet\")\nset(BUILD_GUI FALSE CACHE BOOL \"Build qt-daemon\")\nset(USE_BITCOIN_SECP256K1_FOR_ECDSA FALSE CACHE BOOL \"Use bitcoin-secp256k1 library for validating ECDSA(instead of OpenSSL)\")\nif(NOT USE_BITCOIN_SECP256K1_FOR_ECDSA)\n  add_definitions(-DUSE_OPEN_SSL_FOR_ECDSA)\nendif()\n\n# Add an option to control building of bundled Boost\noption(BUILD_BUNDLED_BOOST \"Build a bundled version of Boost from source\" OFF)\n\ninclude_directories(src contrib/eos_portable_archive contrib contrib/epee/include contrib/jwt-cpp/include ${OPENSSL_INCLUDE_DIR} \"${CMAKE_BINARY_DIR}/version\" \"${CMAKE_BINARY_DIR}/contrib/zlib\")\n\nadd_definitions(-DSTATICLIB)\n\nif(TESTNET)\n  message(\"!!!!!! NOTICE: Project is building for TESTNET !!!!!!\")  \n  add_definitions(-DTESTNET)  \nendif()\n\nif(CAKEWALLET)\n  message(\"NOTICE: Building libraries for CAKEWALLET\")  \n  add_definitions(-DCAKEWALLET)  \n  add_definitions(-DDISABLE_PFR_SERIALIZATION_SELFCHECK)  \nendif()\n\nif(DISABLE_TOR)\n  message(\"NOTICE: Building with disabled TOR support!\")  \n  add_definitions(-DDISABLE_TOR)  \nendif()\n\n\nset(STATIC ${MSVC} CACHE BOOL \"Link libraries statically\")\nif (UNIX AND NOT APPLE)\n  # Note that at the time of this writing the -Wstrict-prototypes flag added below will make this fail\n  find_package(Threads REQUIRED)\nendif()\n\n# TODO(unassigned): expand on types and versions, and then refactor.\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  set(CLANG TRUE)\nendif()\n\n\nadd_definitions(\"/DBOOST_NO_CXX98_FUNCTION_BASE\")\n\n\nif(MSVC)\n  add_definitions(\"/D_CRT_SECURE_NO_WARNINGS /D_WIN32_WINNT=0x0600 /DWIN32_LEAN_AND_MEAN /DGTEST_HAS_TR1_TUPLE=0\")\n  add_compile_options(/EHa /bigobj /Zm1000 /Z7 /MP2 /W3 /GS- /wd4996 /wd4503 /wd4345 /wd4091 /FIinline_c.h)\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /STACK:10485760 /DEBUG dbghelp.lib crypt32.lib\")\n  if(STATIC)\n    foreach(VAR CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELEASE)\n      string(REPLACE \"/MD\" \"/MT\" ${VAR} \"${${VAR}}\")\n    endforeach()\n  endif()\n  include_directories(SYSTEM src/platform/msc)\n  configure_file(utils/Directory.Build.props.in ${CMAKE_BINARY_DIR}/Directory.Build.props)\nelse()\n  set(ARCH default CACHE STRING \"CPU to build for: -march value or default\")\n  if(\"${ARCH}\" STREQUAL \"default\")\n    set(ARCH_FLAG \"\")\n  else()\n    set(ARCH_FLAG \"-march=${ARCH}\")\n  endif()\n  set(WARNINGS \"-Wall -Wextra -Wpointer-arith -Wvla -Wwrite-strings -Wno-error=extra -Wno-error=deprecated-declarations -Wno-error=sign-compare -Wno-error=strict-aliasing -Wno-error=type-limits -Wno-unused-parameter -Wno-error=unused-variable -Wno-aggregate-return -Wno-comment -Wno-unknown-pragmas -Wno-pragmas\")\n#  if(NOT APPLE)\n#    set(WARNINGS \"${WARNINGS} -Werror\")\n#  endif()\n  if(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n    set(WARNINGS \"${WARNINGS} -Wno-implicit-function-declaration -Wno-shift-count-overflow -Wno-error=mismatched-tags -Wno-error=null-conversion -Wno-overloaded-shift-op-parentheses -Wno-error=shift-count-overflow -Wno-error=tautological-constant-out-of-range-compare -Wno-error=unused-private-field -Wno-error=unneeded-internal-declaration\")\n  else()\n    set(WARNINGS \"${WARNINGS} -Wno-error=write-strings -Wlogical-op -Wno-error=maybe-uninitialized\")\n  endif()\n\n  # Since gcc 4.9 the LTO format is non-standard (slim), so we need the gcc-specific ar and ranlib binaries\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" AND NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9.0) AND NOT (CMAKE_SYSTEM_NAME STREQUAL \"Android\"))\n    set(CMAKE_AR \"gcc-ar\")\n    set(CMAKE_RANLIB \"gcc-ranlib\")\n  elseif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" AND NOT APPLE AND NOT (CMAKE_SYSTEM_NAME STREQUAL \"Android\"))\n    set(CMAKE_AR \"llvm-ar\")\n    set(CMAKE_RANLIB \"llvm-ranlib\")\n  endif()\n\n\n  if(MINGW)\n    set(WARNINGS \"${WARNINGS} -Wno-error=unused-value\")\n    set(MINGW_FLAG \"-DWIN32_LEAN_AND_MEAN\")\n    include_directories(SYSTEM src/platform/mingw)\n  else()\n    set(MINGW_FLAG \"\")\n  endif()\n  if(APPLE)\n    set(APPLE_FLAG \"-DGTEST_USE_OWN_TR1_TUPLE=1\")\n  else()\n    set(APPLE_FLAG \"\")\n  endif()\n  set(C_WARNINGS \"-Waggregate-return -Wnested-externs -Wstrict-prototypes -Wno-comment\")\n  set(CXX_WARNINGS \"-Wno-reorder -Wno-missing-field-initializers\")\n  try_compile(STATIC_ASSERT_RES \"${CMAKE_CURRENT_BINARY_DIR}/static-assert\" \"${CMAKE_CURRENT_SOURCE_DIR}/utils/test-static-assert.c\" COMPILE_DEFINITIONS \"-std=c++14\")\n  if(STATIC_ASSERT_RES)\n    set(STATIC_ASSERT_FLAG \"\")\n  else()\n    set(STATIC_ASSERT_FLAG \"-Dstatic_assert=_Static_assert\")\n  endif()\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c11 -D_GNU_SOURCE ${MINGW_FLAG} ${STATIC_ASSERT_FLAG} ${WARNINGS} ${C_WARNINGS} ${ARCH_FLAG}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive -ftemplate-depth-1024 -D_GNU_SOURCE ${APPLE_FLAG} ${MINGW_FLAG} ${WARNINGS} ${CXX_WARNINGS} ${ARCH_FLAG}\")\n  if (NOT APPLE AND NOT MSVC)\n    if (CLANG)\n      set(LLVM_USE_LINKER \"gold\")\n    else()\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold\")\n      link_libraries(\"$<$<AND:$<CXX_COMPILER_ID:GNU>,$<VERSION_LESS:$<CXX_COMPILER_VERSION>,9.0>>:-lstdc++fs>\") # GCC < 9 requires additional linking for std::filesystem. Remove after stop supporting GCC 8.x -- sowle\n    endif()\n  endif()\n  if(CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND NOT (CMAKE_C_COMPILER_VERSION VERSION_LESS 4.8))\n    set(DEBUG_FLAGS \"-g3 -O0\") #set(DEBUG_FLAGS \"-g3 -Og\")\n  else()\n    set(DEBUG_FLAGS \"-g3 -O0\")\n  endif()\n  set(RELEASE_FLAGS \"-Ofast -DNDEBUG -Wno-unused-variable\")\n\n  if(NOT APPLE AND NOT (CMAKE_SYSTEM_NAME STREQUAL \"Android\"))\n    set(RELEASE_FLAGS \"${RELEASE_FLAGS} -flto=auto -g3\")\n  endif()\n  #if(CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND NOT MINGW)\n  #  set(RELEASE_FLAGS \"${RELEASE_FLAGS} -fno-fat-lto-objects\")\n  #endif()\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} ${DEBUG_FLAGS}\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} ${DEBUG_FLAGS}\")\n  set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} ${RELEASE_FLAGS}\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} ${RELEASE_FLAGS}\")\n  if(STATIC)\n    if(APPLE)\n      message(SEND_ERROR \"Static build is not supported on MacOS X\")\n    else()\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++\")\n    endif()\n  endif()\nendif()\n\n\n# always use local Boost installation rather than the system-wide (unless ZANO_USE_SYSTEM_BOOST is defined for some reason, which is not recommended)\nif(NOT DEFINED ENV{ZANO_USE_SYSTEM_BOOST})\n  set(Boost_NO_SYSTEM_PATHS ON)\nendif()\n\nif(MSVC)\n  set(Boost_USE_STATIC_LIBS ON)\nendif()\n\nif(STATIC)  \n  set(Boost_USE_STATIC_LIBS ON)  \n  set(Boost_USE_STATIC_RUNTIME ON)\nendif()\n\nmessage(\"CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}\")    \n\n# --- Find or Build Boost ---\n\n# Define a stable location for the bundled Boost SDK to allow for CI caching.\n# The path is made specific to the compiler and architecture, matching your request for a path like `build/sdk/ggc-x64/boost`.\nstring(TOLOWER \"${CMAKE_CXX_COMPILER_ID}\" COMPILER_ID_LOWER)\nif(COMPILER_ID_LOWER STREQUAL \"gnu\")\n    set(COMPILER_ID_LOWER \"gcc\")\nendif()\nif(CMAKE_SYSTEM_PROCESSOR STREQUAL \"AMD64\")\n    set(PROCESSOR \"x64\")\nelse()\n    set(PROCESSOR ${CMAKE_SYSTEM_PROCESSOR})\nendif()\n# This path is relative to the source root, e.g., /path/to/project/build/sdk/gcc-x64/boost\nset(BUNDLED_BOOST_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/build/sdk/${COMPILER_ID_LOWER}-${PROCESSOR}/boost)\nmessage(STATUS \"Bundled Boost SDK path set to: ${BUNDLED_BOOST_INSTALL_PREFIX}\")\n\nset(ZANO_BOOST_COMPONENTS system filesystem thread timer date_time chrono regex serialization atomic program_options)\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Android\" OR CAKEWALLET)\n  list(APPEND ZANO_BOOST_COMPONENTS locale)\nendif()\nif(NOT APPLE AND NOT (CMAKE_SYSTEM_NAME STREQUAL \"Android\"))\n  list(APPEND ZANO_BOOST_COMPONENTS log)\nendif()\n\n# 1. First, try to find Boost. We hint at our custom SDK location to find a previously built version.\nif(NOT BUILD_BUNDLED_BOOST)\n  # Only hint at the custom SDK location if it actually exists, otherwise find_package will error.\n  if(EXISTS \"${BUNDLED_BOOST_INSTALL_PREFIX}/include/boost/version.hpp\")\n    set(Boost_ROOT ${BUNDLED_BOOST_INSTALL_PREFIX})\n  endif()\n  find_package(Boost ${ZANO_BOOST_MIN_VER} QUIET COMPONENTS ${ZANO_BOOST_COMPONENTS}) # This will now search system paths if the bundled one isn't ready.\nendif()\n\n# 2. If Boost was not found (or a bundled build was requested), build it.\nif(NOT Boost_FOUND)\n  message(STATUS \"Boost not found or BUILD_BUNDLED_BOOST=ON. Building a bundled version.\")\n  set(BUILD_BUNDLED_BOOST ON CACHE BOOL \"Build a bundled version of Boost from source\" FORCE)\n  \n  set(BOOST_INSTALL_PREFIX ${BUNDLED_BOOST_INSTALL_PREFIX})\n  # Include the script that defines the 'boost_external' target\n  # Use BoostB2 for version 1.84.0 (b2 build system).\n  # To use the CMake-based build for 1.85.0+, change this to include(BoostCmake).\n  include(BoostCmake)\n\n  # Manually set the variables that find_package(Boost) would have set.\n  # This makes the rest of the CMake script work as if Boost was \"found\".\n  set(Boost_FOUND TRUE)\n  set(Boost_INCLUDE_DIRS ${BOOST_INSTALL_PREFIX}/include)\n  set(Boost_LIBRARY_DIRS ${BOOST_INSTALL_PREFIX}/lib)\n  set(Boost_VERSION ${BOOST_VERSION}) # From Boost.cmake\n\n  # For non-MSVC compilers, we need to construct the list of library files manually.\n  # MSVC can use auto-linking if we don't define Boost_LIBRARIES.\n  if(NOT MSVC)\n    set(Boost_LIBRARIES \"\")\n    foreach(COMPONENT ${ZANO_BOOST_COMPONENTS})\n      # Append just the library name (e.g., \"boost_system\"). The linker will find the full file\n      # (e.g., libboost_system.a) by searching the directories provided by Boost_LIBRARY_DIRS.\n      # This avoids hard-coding a path that doesn't exist at configure-time.\n      list(APPEND Boost_LIBRARIES \"boost_${COMPONENT}\")\n    endforeach()\n  endif()\nendif()\n\n\nmessage(STATUS \"Boost: ${Boost_VERSION} from ${Boost_LIBRARY_DIRS}\")\n\ninclude_directories(SYSTEM ${PROJECT_SOURCE_DIR}/contrib/ethereum/libethash)\n# Link additional system libraries required by Boost components or the application\nif(MINGW)\n  set(Boost_LIBRARIES \"${Boost_LIBRARIES};ws2_32;mswsock\")\nelseif(NOT MSVC AND NOT APPLE AND NOT CAKEWALLET AND STATIC)\n  # For static builds on Linux, Boost.Locale requires ICU, and other parts may need `dl`.\n  message(\"NOTICE: Statically linking ICU and dl for Boost\")\n  set(Boost_LIBRARIES \"${Boost_LIBRARIES};icui18n;icuuc;icudata;dl\")\nendif()\n\n\nif(BUILD_GUI)\n  find_package(Qt6 REQUIRED COMPONENTS Core5Compat Widgets WebEngineWidgets WebChannel PrintSupport)\n  message(STATUS \"Found QT Packages\")\nendif()\n\nset(COMMIT_ID_IN_VERSION ON CACHE BOOL \"Include commit ID in version\")\nfile(MAKE_DIRECTORY \"${CMAKE_BINARY_DIR}/version\")\nif (NOT COMMIT_ID_IN_VERSION)\n  set(VERSION \"${VERSION}-unknown\")\n  configure_file(\"src/version.h.in\" \"version/version.h\")\n  add_custom_target(version ALL)\nelseif(DEFINED COMMIT)\n  string(REPLACE \".\" \"\\\\.\" VERSION_RE \"${VERSION}\")\n  if(NOT REFS MATCHES \"(\\\\(|, )tag: v${VERSION_RE}(\\\\)|, )\")\n    set(VERSION \"${VERSION}-g${COMMIT}\")\n  endif()\n  configure_file(\"src/version.h.in\" \"version/version.h\")\n  add_custom_target(version ALL)\nelse()\n  find_package(Git QUIET)\n  if(Git_FOUND OR GIT_FOUND)\n    message(STATUS \"Found Git: ${GIT_EXECUTABLE}\")\n    add_custom_target(version ALL \"${CMAKE_COMMAND}\" \"-D\" \"VERSION=${VERSION}\" \"-D\" \"GIT=${GIT_EXECUTABLE}\" \"-D\" \"TO=${CMAKE_BINARY_DIR}/version/version.h\" \"-P\" \"src/version.cmake\" WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\")\n  else()\n    message(STATUS \"WARNING: Git was not found!\")\n    set(VERSION \"${VERSION}-unknown\")\n    configure_file(\"src/version.h.in\" \"version/version.h\")\n    add_custom_target(version ALL)\n  endif()\nendif()\n\nset(BUILD_TESTS FALSE CACHE BOOL \"Build Zano tests\")\nset(DISABLE_MDBX FALSE CACHE BOOL \"Exclude mdbx from build(need for a first time)\") \nif(NOT DISABLE_MDBX)\n   add_definitions(-DENABLED_ENGINE_MDBX)\nendif()\n\nadd_subdirectory(contrib)\nadd_subdirectory(src)\n\nif (BUILD_TESTS)\n  add_subdirectory(tests)\nendif()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	(revision 0cda9070cbfd6580d9984ce392674690fd5e0750)
+++ b/CMakeLists.txt	(date 1756669937882)
@@ -262,7 +262,8 @@
   # Include the script that defines the 'boost_external' target
   # Use BoostB2 for version 1.84.0 (b2 build system).
   # To use the CMake-based build for 1.85.0+, change this to include(BoostCmake).
-  include(BoostCmake)
+#  include(BoostCmake)
+  include(BoostB2)
 
   # Manually set the variables that find_package(Boost) would have set.
   # This makes the rest of the CMake script work as if Boost was "found".
Index: .idea/cmake.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CMakeSharedSettings\">\n    <configurations>\n      <configuration PROFILE_NAME=\"Debug-WSL\" ENABLED=\"true\" GENERATION_DIR=\"build/Debug/Linux/gcc\" CONFIG_NAME=\"Debug\" TOOLCHAIN_NAME=\"WSL\" GENERATION_OPTIONS=\"-DTESTNET=TRUE -DSTATIC=TRUE -DBUILD_GUI=FALSE -DDISABLE_TOR=TRUE\" BUILD_OPTIONS=\"-j10 --config Debug\" />\n      <configuration PROFILE_NAME=\"Debug-Visual Studio\" ENABLED=\"false\" GENERATION_DIR=\"build/Debug/Windows/msvc\" CONFIG_NAME=\"Debug\" TOOLCHAIN_NAME=\"Visual Studio\" GENERATION_OPTIONS=\"-G &quot;Visual Studio 17 2022&quot; -DTESTNET=TRUE -DSTATIC=FALSE -DBUILD_GUI=TRUE -DDISABLE_TOR=1 -DCMAKE_PREFIX_PATH=&quot;D:\\_sdk\\qt\\6.8.3\\msvc2022_64&quot;\" BUILD_OPTIONS=\"-j10 --config Debug\">\n        <ADDITIONAL_GENERATION_ENVIRONMENT>\n          <envs>\n            <env name=\"ZANO_USE_SYSTEM_BOOST\" value=\"true\" />\n          </envs>\n        </ADDITIONAL_GENERATION_ENVIRONMENT>\n      </configuration>\n    </configurations>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/cmake.xml b/.idea/cmake.xml
--- a/.idea/cmake.xml	(revision 0cda9070cbfd6580d9984ce392674690fd5e0750)
+++ b/.idea/cmake.xml	(date 1756668486099)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="CMakeSharedSettings">
     <configurations>
-      <configuration PROFILE_NAME="Debug-WSL" ENABLED="true" GENERATION_DIR="build/Debug/Linux/gcc" CONFIG_NAME="Debug" TOOLCHAIN_NAME="WSL" GENERATION_OPTIONS="-DTESTNET=TRUE -DSTATIC=TRUE -DBUILD_GUI=FALSE -DDISABLE_TOR=TRUE" BUILD_OPTIONS="-j10 --config Debug" />
+      <configuration PROFILE_NAME="Debug-WSL" ENABLED="false" GENERATION_DIR="build/Debug/Linux/gcc" CONFIG_NAME="Debug" TOOLCHAIN_NAME="WSL" GENERATION_OPTIONS="-DTESTNET=TRUE -DSTATIC=TRUE -DBUILD_GUI=FALSE -DDISABLE_TOR=TRUE" BUILD_OPTIONS="-j10 --config Debug" />
       <configuration PROFILE_NAME="Debug-Visual Studio" ENABLED="false" GENERATION_DIR="build/Debug/Windows/msvc" CONFIG_NAME="Debug" TOOLCHAIN_NAME="Visual Studio" GENERATION_OPTIONS="-G &quot;Visual Studio 17 2022&quot; -DTESTNET=TRUE -DSTATIC=FALSE -DBUILD_GUI=TRUE -DDISABLE_TOR=1 -DCMAKE_PREFIX_PATH=&quot;D:\_sdk\qt\6.8.3\msvc2022_64&quot;" BUILD_OPTIONS="-j10 --config Debug">
         <ADDITIONAL_GENERATION_ENVIRONMENT>
           <envs>
Index: cmake/BoostCmake.cmake
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This script handles downloading and building a specific version of Boost using CMake.\n# It is intended to be included from the main CMakeLists.txt.\n\ninclude(ExternalProject)\n\n# --- Configuration ---\nset(BOOST_VERSION \"1.85.0\")\n# List of Boost libraries to build. Can be customized via cmake cache.\nset(BOOST_LIBS_TO_BUILD \"system;filesystem;locale;thread;timer;date_time;chrono;regex;serialization;atomic;program_options;log\")\n\n# --- Version and Download Info ---\nset(BOOST_URL \"https://github.com/boostorg/boost/releases/download/boost-1.85.0/boost-1.85.0-cmake.tar.gz\")\nset(BOOST_SHA256 \"ab9c9c4797384b0949dd676cf86b4f99553f8c148d767485aaac412af25183e6\") # SHA256 for Boost 1.85.0 (CMake version)\n\nif(NOT BOOST_INSTALL_PREFIX)\n    message(FATAL_ERROR \"BOOST_INSTALL_PREFIX must be set before including BoostCmake.cmake. This is handled by the main CMakeLists.txt.\")\nendif()\n\n# Temporary directories for source and build\nset(BOOST_SOURCE_DIR ${CMAKE_BINARY_DIR}/boost_src)\nset(BOOST_BUILD_DIR ${CMAKE_BINARY_DIR}/boost_bld)\n\n# --- Boost CMake Build Arguments ---\nset(BOOST_CMAKE_ARGS\n    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>\n    -DBOOST_INCLUDE_LIBRARIES=${BOOST_LIBS_TO_BUILD}\n    -DBUILD_TESTING=OFF\n    -DBOOST_BUILD_TESTS=OFF\n    -DBOOST_BUILD_EXAMPLES=OFF\n    -DCMAKE_POLICY_DEFAULT_CMP0077=NEW # Required by Boost's CMake for modern behavior\n)\n\n# Pass build type for single-configuration generators (e.g., Makefiles)\nif(CMAKE_BUILD_TYPE)\n    list(APPEND BOOST_CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE})\nendif()\n\n# For static linking on Windows, ensure static runtime is used.\nif(MSVC)\n    list(APPEND BOOST_CMAKE_ARGS -DBOOST_USE_STATIC_RUNTIME=ON)\n    # Prevent auto-linking by MSVC for the main project\n    add_compile_definitions(BOOST_ALL_NO_LIB)\nendif()\n\n# Forward toolchain file for cross-compilation\nif(CMAKE_TOOLCHAIN_FILE)\n    list(APPEND BOOST_CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE})\nendif()\n\n# --- External Project Definition ---\nExternalProject_Add(\n    boost_external\n    URL ${BOOST_URL}\n    URL_HASH SHA256=${BOOST_SHA256}\n    SOURCE_DIR ${BOOST_SOURCE_DIR}\n    BINARY_DIR ${BOOST_BUILD_DIR}\n    INSTALL_DIR ${BOOST_INSTALL_PREFIX}\n\n    # Configure, build, and install steps using CMake\n    CMAKE_ARGS ${BOOST_CMAKE_ARGS}\n    # Use generator expressions to handle multi-config generators\n    BUILD_COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --config $<CONFIG> -j${CMAKE_HOST_SYSTEM_PROCESSOR_COUNT}\n    INSTALL_COMMAND ${CMAKE_COMMAND} --install <BINARY_DIR> --config $<CONFIG>\n\n    LOG_CONFIGURE 1\n    LOG_BUILD 1\n    LOG_INSTALL 1\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake/BoostCmake.cmake b/cmake/BoostCmake.cmake
--- a/cmake/BoostCmake.cmake	(revision 0cda9070cbfd6580d9984ce392674690fd5e0750)
+++ b/cmake/BoostCmake.cmake	(date 1756669548335)
@@ -23,7 +23,7 @@
 # --- Boost CMake Build Arguments ---
 set(BOOST_CMAKE_ARGS
     -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
-    -DBOOST_INCLUDE_LIBRARIES=${BOOST_LIBS_TO_BUILD}
+    -DBOOST_INCLUDED_LIBRARIES=${BOOST_LIBS_TO_BUILD}
     -DBUILD_TESTING=OFF
     -DBOOST_BUILD_TESTS=OFF
     -DBOOST_BUILD_EXAMPLES=OFF
