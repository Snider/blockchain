# Modern Makefile for the project.
# Provides a streamlined development workflow and compatibility with old targets.

 .PHONY: help all dev-build build build-sdk clean clean-dev configure release debug \
         gui gui-release gui-debug static static-release gui-static package-boost \
         test test-release test-debug tags

 # Set 'help' as the default target to be executed when 'make' is called without arguments.
 .DEFAULT_GOAL := help

# --- Primary Build Configuration ---
# These can be overridden from the command line, e.g., `make BUILD_TYPE=Debug`
BUILD_TYPE ?= Release
BUILD_GUI ?= OFF
BUILD_TESTS ?= OFF
STATIC_BUILD ?= OFF
TESTNET ?= OFF
DISABLE_TOR ?= ON

# --- Build Paths and Tools ---
BUILD_ROOT := build
# The SDK directory inside BUILD_ROOT to preserve during cleaning.
SDK_DIR_NAME := sdk

# Determine the build directory based on configuration.
# e.g., build/release, build/debug-gui
BUILD_DIR_SUFFIX := $(shell echo $(BUILD_TYPE) | tr '[:upper:]' '[:lower:]')
ifeq ($(BUILD_GUI),ON)
    BUILD_DIR_SUFFIX := $(BUILD_DIR_SUFFIX)-gui
endif
ifeq ($(STATIC_BUILD),ON)
    BUILD_DIR_SUFFIX := $(BUILD_DIR_SUFFIX)-static
endif
BUILD_DIR := $(BUILD_ROOT)/$(BUILD_DIR_SUFFIX)

# Get number of cores for parallel builds.
ifeq ($(OS),Windows_NT)
    NPROC ?= $(NUMBER_OF_PROCESSORS)
else
    NPROC ?= $(shell sysctl -n hw.ncpu 2>/dev/null || nproc)
endif

# --- CMake Configuration ---
# Collect all CMake flags based on the variables.
CMAKE_FLAGS := -D CMAKE_BUILD_TYPE=$(BUILD_TYPE)
CMAKE_FLAGS += -D BUILD_GUI=$(BUILD_GUI)
CMAKE_FLAGS += -D BUILD_TESTS=$(BUILD_TESTS)
CMAKE_FLAGS += -D STATIC=$(STATIC_BUILD)
CMAKE_FLAGS += -D TESTNET=$(TESTNET)
CMAKE_FLAGS += -D DISABLE_TOR=$(DISABLE_TOR)

# Include packaging variables generated by CMake, if they exist.
# This allows make targets to know about CMake-computed values.
-include $(BUILD_DIR)/packaging.vars

# --- Help Target ---
help:
	@echo "Lethean Blockchain - Build System"
	@echo
	@echo "Usage:  make <target> [OPTIONS...]"
	@echo
	@echo "Core Targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z0-9_-]+:.*?## / { if ($$2 !~ /@hidden/) printf "  %-20s %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo
	@echo "Options:"
	@echo "  BUILD_TYPE=<type>    Specify build type (e.g., Debug, Release). Default: $(BUILD_TYPE)"
	@echo "  BUILD_GUI=<ON/OFF>   Enable or disable GUI build. Default: $(BUILD_GUI)"
	@echo "  STATIC_BUILD=<ON/OFF> Enable or disable static build. Default: $(STATIC_BUILD)"
	@echo "  BUILD_TESTS=<ON/OFF> Enable or disable building tests. Default: $(BUILD_TESTS)"
	@echo "  TESTNET=<ON/OFF>     Build for testnet. Default: $(TESTNET)"
	@echo "  DISABLE_TOR=<ON/OFF> Build without TOR support. Default: $(DISABLE_TOR)"
	@echo
	@echo "For more information:"
	@echo "  Documentation: https://lt.hn"
	@echo "  Discord:       https://discord.lethean.io"
	@echo "  GitHub:        https://github.com/letheanVPN"

# The main development build target.
# Cleans artifacts (preserving SDK), re-configures, and builds.
# Example: `make dev-build BUILD_TYPE=Debug BUILD_GUI=ON`
dev-build: clean-dev configure build ## Clean artifacts, configure, and build. Recommended for development.
	@echo
	@echo "Dev build complete. Binaries are in $(BUILD_DIR)/src"
	@echo "$(BUILD_DIR)" > .last_build_dir

# Configure the project using CMake.
configure: ## Configure the project with the specified options.
	@echo "--- Configuring project in $(BUILD_DIR) ---"
	@echo "   Build type: $(BUILD_TYPE), GUI: $(BUILD_GUI), Static: $(STATIC_BUILD), Tests: $(BUILD_TESTS), TOR: $(DISABLE_TOR)"
	@cmake -S . -B $(BUILD_DIR) $(CMAKE_FLAGS)

# Build the project using the existing configuration.
build: configure ## Build all default targets for the current configuration.
	@echo "--- Building all targets in $(BUILD_DIR) with $(NPROC) jobs ---"
	@cmake --build $(BUILD_DIR) -- -j$(NPROC)

build-cli: configure ## Build only the command-line interface tools.
	@echo "--- Building SDK and CLI tools in $(BUILD_DIR) with $(NPROC) jobs ---"
	@cmake --build $(BUILD_DIR) --target build_sdk daemon simplewallet connectivity_tool -- -j$(NPROC)

build-gui: configure ## Build only the GUI application.
	@echo "--- Building SDK and GUI in $(BUILD_DIR) with $(NPROC) jobs ---"
	@cmake --build $(BUILD_DIR) --target build_sdk Zano -- -j$(NPROC)

# Build the SDK dependencies (e.g., Boost) separately.
build_sdk: configure ## Build bundled dependencies like Boost if required.
	@echo "--- Building SDK dependencies ---"
	@cmake --build $(BUILD_DIR) --target build_sdk

# DANGEROUS: Clean the entire build root, including the cached SDK.
clean: ## DANGEROUS: Deletes the entire build directory, including cached SDKs.
	@echo "--- Cleaning entire build directory: $(BUILD_ROOT) ---"
	@rm -rf $(BUILD_ROOT)

# Clean build artifacts but preserve the SDK cache.
clean-dev: ## Clean build artifacts but preserve the cached SDK.
	@echo "--- Cleaning build artifacts, preserving SDK in $(BUILD_ROOT)/$(SDK_DIR_NAME) ---"
	@mkdir -p $(BUILD_ROOT)
	@find $(BUILD_ROOT) -mindepth 1 -maxdepth 1 -not -name "$(SDK_DIR_NAME)" -exec rm -rf {} +
	@echo "Clean complete."

# --- Compatibility Targets (for old workflow) ---
all: release ## Build the project for release (default).

release: ## Configure and build a release version.
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=OFF BUILD_TESTS=OFF STATIC_BUILD=OFF

debug: ## Configure and build a debug version.
	@$(MAKE) dev-build BUILD_TYPE=Debug BUILD_GUI=OFF BUILD_TESTS=OFF STATIC_BUILD=OFF

gui: gui-release ## Build a release version with GUI.

gui-release: ##@hidden
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=ON BUILD_TESTS=OFF STATIC_BUILD=OFF

gui-debug: ## Build a debug version with GUI.
	@$(MAKE) dev-build BUILD_TYPE=Debug BUILD_GUI=ON BUILD_TESTS=OFF STATIC_BUILD=OFF

static: static-release ## Build a static release version.

static-release: ##@hidden
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=OFF BUILD_TESTS=OFF STATIC_BUILD=ON

gui-static: ## Build a static release version with GUI.
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=ON BUILD_TESTS=OFF STATIC_BUILD=ON

test: ## Run tests on the most recently built configuration.
	@if [ ! -f .last_build_dir ]; then \
		echo "Error: No build has been run. Use 'make release' or 'make debug' first." >&2; \
		exit 1; \
	fi
	@LAST_BUILD_DIR=$$(cat .last_build_dir); \
	echo "--- Running tests in $$LAST_BUILD_DIR ---"; \
	cmake --build $$LAST_BUILD_DIR --target test

test-release: ## Build a release version and run tests.
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=OFF BUILD_TESTS=ON STATIC_BUILD=OFF
	@$(MAKE) test

test-debug: ## Build a debug version and run tests.
	@$(MAKE) dev-build BUILD_TYPE=Debug BUILD_GUI=OFF BUILD_TESTS=ON STATIC_BUILD=OFF
	@$(MAKE) test

# --- Utility Targets ---

package-boost: ## Package the pre-built Boost library into a distributable archive.
	@echo "--- Packaging Boost SDK ---"
	@if [ -z "$(BOOST_VERSION_FOR_PACKAGING)" ]; then \
		echo "Error: Project not configured. Run 'make configure' first." >&2; \
		exit 1; \
	fi
	@if [ ! -d "$(BOOST_SDK_DIR_FOR_PACKAGING)" ]; then \
		echo "Error: Boost SDK directory not found at $(BOOST_SDK_DIR_FOR_PACKAGING)." >&2; \
		echo "Hint: Run 'make build_sdk' to build it first." >&2; \
		exit 1; \
	fi
	@PACKAGE_NAME=boost-$(BOOST_VERSION_FOR_PACKAGING)-$(DEP_PLATFORM_ID_FOR_PACKAGING).tar.gz; \
	echo "Creating package: $$PACKAGE_NAME"; \
	tar -czf $$PACKAGE_NAME -C $(dir $(BOOST_SDK_DIR_FOR_PACKAGING)) $(notdir $(BOOST_SDK_DIR_FOR_PACKAGING)); \
	echo "Package created successfully: $$PACKAGE_NAME"

tags: ## Generate ctags for source code navigation.
	@echo "--- Generating ctags ---"
	@ctags -R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ src contrib tests/gtest