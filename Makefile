# Modern Makefile for the project.
# Provides a streamlined development workflow using cmake instead of shell functions for cross-platform compatibility..

 .PHONY: help all dev-build build build-sdk clean clean-dev configure release debug \
         gui gui-release gui-debug static static-release gui-static package-boost \
         test test-release test-debug tags

 # Set 'help' as the default target to be executed when 'make' is called without arguments.
 .DEFAULT_GOAL := help

# --- Primary Build Configuration ---
# These can be overridden from the command line, e.g., `make BUILD_TYPE=Debug`
BUILD_TYPE ?= Release
BUILD_GUI ?= OFF
BUILD_TESTS ?= OFF
STATIC_BUILD ?= OFF
TESTNET ?= OFF
DISABLE_TOR ?= ON

# --- Build Paths and Tools Configuration ---
BUILD_ROOT := build
# The SDK directory inside BUILD_ROOT to preserve during cleaning.
SDK_DIR_NAME := sdk

# The minimum required CMake version. If the system's version is insufficient,
# this version will be downloaded automatically.
CMAKE_WANTED_VERSION := 3.26.3

# The bootstrap process determines the correct CMake to use and writes it to CMAKE_MK.
CMAKE_MK := $(BUILD_ROOT)/$(SDK_DIR_NAME)/cmake.mk
NPROC_MK := $(BUILD_ROOT)/$(SDK_DIR_NAME)/nproc.mk

# Include the generated file that defines the CMAKE variable.
# The '-' suppresses errors if the file doesn't exist yet (e.g., on first run).
-include $(CMAKE_MK)
-include $(NPROC_MK)

# The build directory is determined by configure.cmake.
# We include the result here so other targets can use it.
-include .build_dir_for_make

# If NPROC is not defined after including the file, default to 1.
NPROC ?= 1

# Include packaging variables generated by CMake, if they exist.
# This allows make targets to know about CMake-computed values.
-include $(BUILD_DIR_FOR_MAKE)/packaging.vars

# --- CMake Bootstrapping ---
# This target generates the cmake.mk file if it's missing or if the script/Makefile changes.
# It uses the system's `cmake` for the one-time bootstrap operation.
$(CMAKE_MK) $(NPROC_MK): cmake/utils/bootstrap.cmake Makefile
	@echo "--- Bootstrapping build environment (CMake, NPROC)..."
	@cmake -E make_directory $(dir $(CMAKE_MK))
	@cmake -D CMAKE_WANTED_VERSION=$(CMAKE_WANTED_VERSION) \
	       -D BUILD_ROOT=$(BUILD_ROOT) \
	       -P cmake/utils/bootstrap.cmake

.PHONY: bootstrap-cmake
bootstrap-cmake: $(CMAKE_MK) $(NPROC_MK)

# --- Help Target ---
help: bootstrap-cmake ## Display this help message.
	@$(CMAKE) -D BUILD_TYPE=$(BUILD_TYPE) \
	       -D BUILD_GUI=$(BUILD_GUI) \
	       -D STATIC_BUILD=$(STATIC_BUILD) \
	       -D BUILD_TESTS=$(BUILD_TESTS) \
	       -D TESTNET=$(TESTNET) \
	       -D DISABLE_TOR=$(DISABLE_TOR) \
	       -P cmake/utils/help.cmake

# The main development build target.
# Cleans artifacts (preserving SDK), re-configures, and builds.
# Example: `make dev-build BUILD_TYPE=Debug BUILD_GUI=ON`
dev-build: clean-dev build ## Clean artifacts, configure, and build. Recommended for development.
	@$(CMAKE) -E echo ""
	@$(CMAKE) -E echo "Dev build complete. Binaries are in $(BUILD_DIR_FOR_MAKE)/src"

# Configure the project using CMake.
configure: bootstrap-cmake ## Configure the project with the specified options.
	@$(CMAKE) -D BUILD_ROOT=$(BUILD_ROOT) \
	       -D BUILD_TYPE=$(BUILD_TYPE) \
	       -D BUILD_GUI=$(BUILD_GUI) \
	       -D BUILD_TESTS=$(BUILD_TESTS) \
	       -D STATIC_BUILD=$(STATIC_BUILD) \
	       -D TESTNET=$(TESTNET) \
	       -D DISABLE_TOR=$(DISABLE_TOR) \
	       -P cmake/utils/configure.cmake

# Build the project using the existing configuration.
build: configure ## Build the specified targets or all default targets.
	@$(CMAKE) -E echo "--- Building project in $(BUILD_DIR_FOR_MAKE) with $(NPROC) jobs (Targets: $(or $(TARGETS),all)) ---"
	@$(CMAKE) --build $(BUILD_DIR_FOR_MAKE) --target $(or $(TARGETS),all) -- -j$(NPROC)

# Build the SDK dependencies (e.g., Boost) separately.
build_sdk: bootstrap-cmake configure ## Build bundled dependencies like Boost if required.
	@$(CMAKE) -E echo "--- Building SDK dependencies ---"
	@$(CMAKE) --build $(BUILD_DIR_FOR_MAKE) --target build_sdk

# DANGEROUS: Clean the entire build root, including the cached SDK.
clean: bootstrap-cmake ## DANGEROUS: Deletes the entire build directory, including cached SDKs.
	@$(CMAKE) -E echo "--- Cleaning entire build directory: $(BUILD_ROOT) ---"
	@$(CMAKE) -E rm -rf $(BUILD_ROOT)

# Clean build artifacts but preserve the SDK cache.
clean-dev: bootstrap-cmake ## Clean build artifacts but preserve the cached SDK.
	@$(CMAKE) -E rm -f .build_dir_for_make .last_build_dir
	@$(CMAKE) -E echo "--- Cleaning build artifacts, preserving SDK in $(BUILD_ROOT)/$(SDK_DIR_NAME) ---"
	@$(CMAKE) -E make_directory $(BUILD_ROOT)
	@$(CMAKE) -D CLEAN_DIR=$(BUILD_ROOT) -D PRESERVE_NAME=$(SDK_DIR_NAME) -P cmake/utils/clean_except.cmake
	@$(CMAKE) -E echo "Clean complete."

# --- Compatibility Targets (for old workflow) ---
all: release ## Build the project for release (default).

release: ## Configure and build a release version.
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=OFF BUILD_TESTS=OFF STATIC_BUILD=OFF

debug: ## Configure and build a debug version.
	@$(MAKE) dev-build BUILD_TYPE=Debug BUILD_GUI=OFF BUILD_TESTS=OFF STATIC_BUILD=OFF

gui: gui-release ## Build a release version with GUI.

gui-release: ##@hidden
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=ON BUILD_TESTS=OFF STATIC_BUILD=OFF

gui-debug: ## Build a debug version with GUI.
	@$(MAKE) dev-build BUILD_TYPE=Debug BUILD_GUI=ON BUILD_TESTS=OFF STATIC_BUILD=OFF

static: static-release ## Build a static release version.

static-release: ##@hidden
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=OFF BUILD_TESTS=OFF STATIC_BUILD=ON

gui-static: ## Build a static release version with GUI.
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=ON BUILD_TESTS=OFF STATIC_BUILD=ON

test: bootstrap-cmake ## Run tests on the most recently built configuration.
	@$(CMAKE) -P cmake/utils/run_tests.cmake

test-release: ## Build a release version and run tests.
	@$(MAKE) dev-build BUILD_TYPE=Release BUILD_GUI=OFF BUILD_TESTS=ON STATIC_BUILD=OFF
	@$(CMAKE) -P cmake/utils/run_tests.cmake

test-debug: ## Build a debug version and run tests.
	@$(MAKE) dev-build BUILD_TYPE=Debug BUILD_GUI=OFF BUILD_TESTS=ON STATIC_BUILD=OFF
	@$(CMAKE) -P cmake/utils/run_tests.cmake

# --- Utility Targets ---

package-boost: bootstrap-cmake ## Package the pre-built Boost library into a distributable archive.
	@$(CMAKE) -D BOOST_VERSION="$(BOOST_VERSION_FOR_PACKAGING)" \
	       -D BOOST_SDK_DIR="$(BOOST_SDK_DIR_FOR_PACKAGING)" \
	       -D PLATFORM_ID="$(DEP_PLATFORM_ID_FOR_PACKAGING)" \
	       -P cmake/utils/package_boost.cmake

tags: bootstrap-cmake ## Generate ctags for source code navigation.
	@$(CMAKE) -E echo "--- Generating ctags ---"
	@ctags -R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ src contrib tests/gtest